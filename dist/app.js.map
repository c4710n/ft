{"version":3,"sources":["../src/app.js"],"names":["patch","PIXI","styleDOM","RenderSystem","HUDSystem","TweenSystem","ScaleSystem","SoundSystem","VisibilitySystem","ResizeSystem","ResManager","AdvancedResManager","SceneManager","autoDetectRenderer","RenderTexture","App","container","ticker","Ticker","stage","Container","systems","rm","arm","sm","shared","dom","options","addSystem","render","scale","enqueueSystems","renderer","renderTexture","create","system","name","Object","values","add","update","updatePriority","start","stop","app"],"mappings":"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","sourcesContent":["import patch from './patch'\nimport { PIXI, styleDOM } from './core'\nimport {\n  RenderSystem,\n  HUDSystem,\n  TweenSystem,\n  ScaleSystem,\n  SoundSystem,\n  VisibilitySystem,\n  ResizeSystem,\n} from './systems'\nimport ResManager from './res/ResManager'\nimport AdvancedResManager from './res/AdvancedResManager'\nimport SceneManager from './scene/SceneManager'\n\npatch()\n\nconst { autoDetectRenderer, RenderTexture } = PIXI\n\n/**\n * Commander for framework.\n */\nclass App {\n  constructor() {\n    this.container = null\n    this.ticker = new PIXI.Ticker()\n    this.stage = new PIXI.Container()\n    this.systems = {}\n\n    // default instances of managers\n    this.rm = ResManager.default\n    this.arm = AdvancedResManager.default\n    this.sm = SceneManager.default\n\n    // place to hold global references\n    this.shared = {}\n  }\n\n  /**\n   * Prepare for start.\n   *\n   * @param {string} selector - selector of DOM container.\n   * @param {Object} options\n   * @param {number} [options.renderer] - renderer's default options.\n   * @param {string} [options.backgroundColor='#ffffff'] - background of DOM container.\n   */\n  init(dom, options) {\n    this.container = new styleDOM(dom, options.container)\n\n    this.addSystem(new RenderSystem(options.render))\n    this.addSystem(new HUDSystem())\n    this.addSystem(new TweenSystem())\n    this.addSystem(new ScaleSystem(options.scale))\n    this.addSystem(new SoundSystem())\n    this.addSystem(new VisibilitySystem())\n    this.addSystem(new ResizeSystem())\n    this.enqueueSystems()\n\n    return this\n  }\n\n  get sharedRenderer() {\n    if (!this.shared.renderer) {\n      this.shared.renderer = autoDetectRenderer()\n    }\n\n    return this.shared.renderer\n  }\n\n  get sharedRenderTexture() {\n    if (!this.shared.renderTexture) {\n      this.shared.renderTexture = RenderTexture.create(0, 0)\n    }\n\n    return this.shared.renderTexture\n  }\n\n  /**\n   * @access private\n   */\n  addSystem(system) {\n    this.systems[system.name] = system\n  }\n\n  /**\n   * @access private\n   */\n  enqueueSystems() {\n    const systems = Object.values(this.systems)\n\n    for (const system of systems) {\n      this.ticker.add(system.update, system, system.updatePriority)\n    }\n  }\n\n  /**\n   * start ticker.\n   */\n  start() {\n    this.ticker.start()\n  }\n\n  /**\n   * stop ticker.\n   */\n  stop() {\n    this.ticker.stop()\n  }\n}\n\nconst app = new App()\n\nexport default app\n"],"file":"app.js"}