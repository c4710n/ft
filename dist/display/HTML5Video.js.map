{"version":3,"sources":["../../src/display/HTML5Video.js"],"names":["Device","PIXI","Video","DOM","HTML5Video","args","$preplayPromise","$ready","url","layer","poster","loop","controls","video","setOrigin","addChild","videoDOM","dom","src","style","objectFit","crossorigin","setAttribute","isIOS","isQQBrowser","posterTexture","Sprite","$poster","videoPlayer","muted","value","addEventListener","onEnd","removeEventListener","setSize","setAngle","play","pause","emit","nativePlay","Promise","resolve","listener","currentTime","$readyTime"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,MAAT,EAAiBC,IAAjB,QAA6B,SAA7B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,U;;;;;AACJ,wBAAqB;AAAA;;AAAA;;AAAA,sCAANC,IAAM;AAANA,MAAAA,IAAM;AAAA;;AACnB,oDAASA,IAAT;AAEA,UAAKC,eAAL,GAAuB,IAAvB;AACA,UAAKC,MAAL,GAAc,KAAd;AAJmB;AAKpB;;;;WAED,2BAAkBC,GAAlB,EAA+D;AAAA,qFAAJ,EAAI;AAAA,UAAtCC,KAAsC,QAAtCA,KAAsC;AAAA,UAA/BC,MAA+B,QAA/BA,MAA+B;AAAA,UAAvBC,IAAuB,QAAvBA,IAAuB;AAAA,UAAjBC,QAAiB,QAAjBA,QAAiB;;AAC7D,UAAMC,KAAK,GAAG,IAAIV,GAAJ,CAAQ,OAAR,EAAiB;AAAEM,QAAAA,KAAK,EAALA;AAAF,OAAjB,EAA4BK,SAA5B,CAAsC,GAAtC,CAAd;AACA,WAAKD,KAAL,GAAaA,KAAb;AACA,WAAKE,QAAL,CAAcF,KAAd;AAEA,UAAMG,QAAQ,GAAGH,KAAK,CAACI,GAAvB;AACAD,MAAAA,QAAQ,CAACE,GAAT,GAAeV,GAAf;AACAQ,MAAAA,QAAQ,CAACL,IAAT,GAAgBA,IAAhB;AACAK,MAAAA,QAAQ,CAACG,KAAT,CAAeC,SAAf,GAA2B,MAA3B;AACAJ,MAAAA,QAAQ,CAACK,WAAT,GAAuB,WAAvB;AACAL,MAAAA,QAAQ,CAACJ,QAAT,GAAoBA,QAApB;AACAI,MAAAA,QAAQ,CAACM,YAAT,CAAsB,SAAtB,EAAiC,MAAjC;AACAN,MAAAA,QAAQ,CAACM,YAAT,CAAsB,aAAtB,EAAqC,EAArC;AACAN,MAAAA,QAAQ,CAACM,YAAT,CAAsB,oBAAtB,EAA4C,EAA5C,EAb6D,CAab;AAChD;;AACA,UAAItB,MAAM,CAACuB,KAAP,IAAgBvB,MAAM,CAACwB,WAA3B,EAAwC;AACtCR,QAAAA,QAAQ,CAACM,YAAT,CAAsB,gBAAtB,EAAwC,EAAxC;AACD;;AAED,UAAMG,aAAa,GAAGf,MAAtB;;AACA,UAAIe,aAAJ,EAAmB;AACjB,YAAMf,OAAM,GAAG,IAAIT,IAAI,CAACyB,MAAT,CAAgBD,aAAhB,EAA+BX,SAA/B,CAAyC,GAAzC,CAAf;;AACA,aAAKC,QAAL,CAAcL,OAAd;AACA,aAAKiB,OAAL,GAAejB,OAAf;AACD;;AAED,UAAMkB,WAAW,GAAGZ,QAApB;AAEA,aAAOY,WAAP;AACD;;;SAED,eAAY;AACV,aAAO,KAAKA,WAAL,CAAiBC,KAAxB;AACD,K;SAED,aAAUC,KAAV,EAAiB;AACf,UAAIA,KAAK,KAAK,IAAd,EAAoB;AAClB,aAAKF,WAAL,CAAiBC,KAAjB,GAAyB,IAAzB;AACD,OAFD,MAEO;AACL,aAAKD,WAAL,CAAiBC,KAAjB,GAAyB,KAAzB;AACD;AACF;;;WAED,mBAAU;AACR,WAAKD,WAAL,CAAiBG,gBAAjB,CAAkC,OAAlC,EAA2C,KAAKC,KAAhD;AACD;;;WAED,qBAAY;AACV,WAAKJ,WAAL,CAAiBK,mBAAjB,CAAqC,OAArC,EAA8C,KAAKD,KAAnD;AACD;;;WAED,mBAAiB;AAAA;;AAAA,yCAAN3B,IAAM;AAANA,QAAAA,IAAM;AAAA;;AACf,UAAI,KAAKsB,OAAT,EAAkB;AAAA;;AAChB,8BAAKA,OAAL,EAAaO,OAAb,sBAAwB7B,IAAxB;AACD;;AAED,oHAAwBA,IAAxB;AACD;;;WAED,oBAAkB;AAAA;;AAAA,yCAANA,IAAM;AAANA,QAAAA,IAAM;AAAA;;AAChB,UAAI,KAAKsB,OAAT,EAAkB;AAAA;;AAChB,+BAAKA,OAAL,EAAaQ,QAAb,uBAAyB9B,IAAzB;AACD;;AAED,qHAAyBA,IAAzB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,kBAAS;AACP,WAAKuB,WAAL,CAAiBQ,IAAjB;AACA,WAAKR,WAAL,CAAiBS,KAAjB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,gBAAO;AAAA;;AACL,UAAQT,WAAR,GAAwB,IAAxB,CAAQA,WAAR;;AAEA,UAAI,KAAKrB,MAAT,EAAiB;AACf,aAAK+B,IAAL,CAAU,MAAV;AACA,eAAO,KAAKC,UAAL,EAAP;AACD;;AAED,WAAKjC,eAAL,GACE,KAAKA,eAAL,IACA,IAAIkC,OAAJ,CAAY,UAACC,OAAD,EAAa;AACvB,YAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,cAAQC,WAAR,GAAwBf,WAAxB,CAAQe,WAAR;;AACA,cAAIA,WAAW,GAAG,CAAlB,EAAqB;AACnBf,YAAAA,WAAW,CAACK,mBAAZ,CAAgC,YAAhC,EAA8CS,QAA9C;AACA,YAAA,MAAI,CAACnC,MAAL,GAAc,IAAd;AACA,YAAA,MAAI,CAACqC,UAAL,GAAkBD,WAAlB;AACAf,YAAAA,WAAW,CAACC,KAAZ,GAAoB,KAApB;;AACA,YAAA,MAAI,CAACS,IAAL,CAAU,MAAV;;AACAG,YAAAA,OAAO;AACR;AACF,SAVD;;AAWAb,QAAAA,WAAW,CAACG,gBAAZ,CAA6B,YAA7B,EAA2CW,QAA3C;AACAd,QAAAA,WAAW,CAACC,KAAZ,GAAoB,IAApB;;AACA,QAAA,MAAI,CAACU,UAAL;AACD,OAfD,CAFF;AAkBA,aAAO,KAAKjC,eAAZ;AACD;;;WAED,sBAAa;AACX;;AACA,aAAO,KAAKsB,WAAL,CAAiBQ,IAAjB,EAAP;AACD;;;WAED,uBAAc;AACZ;;AACA,aAAO,KAAKR,WAAL,CAAiBS,KAAjB,EAAP;AACD;;;;EA3IsBnC,K;;AA8IzB,eAAeE,UAAf","sourcesContent":["import { Device, PIXI } from '../core'\nimport Video from './Video'\nimport DOM from './DOM'\n\n/**\n * Video player based on HTML5 `<video>` tag.\n *\n * @example\n * // create\n * const url = 'https://url/to/video'\n * const video = new HTML5Video(url)\n *\n * // unlock\n * await video.unlock()\n *\n * // play\n * await video.play()\n */\nclass HTML5Video extends Video {\n  constructor(...args) {\n    super(...args)\n\n    this.$preplayPromise = null\n    this.$ready = false\n  }\n\n  createVideoPlayer(url, { layer, poster, loop, controls } = {}) {\n    const video = new DOM('video', { layer }).setOrigin(0.5)\n    this.video = video\n    this.addChild(video)\n\n    const videoDOM = video.dom\n    videoDOM.src = url\n    videoDOM.loop = loop\n    videoDOM.style.objectFit = 'fill'\n    videoDOM.crossorigin = 'anonymous'\n    videoDOM.controls = controls\n    videoDOM.setAttribute('preload', 'auto')\n    videoDOM.setAttribute('playsinline', '')\n    videoDOM.setAttribute('webkit-playsinline', '') // WebKit-based browser adaptation\n    // QQ Browser on iOS\n    if (Device.isIOS && Device.isQQBrowser) {\n      videoDOM.setAttribute('x5-playsinline', '')\n    }\n\n    const posterTexture = poster\n    if (posterTexture) {\n      const poster = new PIXI.Sprite(posterTexture).setOrigin(0.5)\n      this.addChild(poster)\n      this.$poster = poster\n    }\n\n    const videoPlayer = videoDOM\n\n    return videoPlayer\n  }\n\n  get muted() {\n    return this.videoPlayer.muted\n  }\n\n  set muted(value) {\n    if (value === true) {\n      this.videoPlayer.muted = true\n    } else {\n      this.videoPlayer.muted = false\n    }\n  }\n\n  onAdded() {\n    this.videoPlayer.addEventListener('ended', this.onEnd)\n  }\n\n  onRemoved() {\n    this.videoPlayer.removeEventListener('ended', this.onEnd)\n  }\n\n  setSize(...args) {\n    if (this.$poster) {\n      this.$poster.setSize(...args)\n    }\n\n    return super.setSize(...args)\n  }\n\n  setAngle(...args) {\n    if (this.$poster) {\n      this.$poster.setAngle(...args)\n    }\n\n    return super.setAngle(...args)\n  }\n\n  /**\n   * Unlock current video.\n   *\n   * @example\n   * video1.unlock()\n   * video2.unlock()\n   * video3.unlock()\n   * await video1.play()\n   *\n   * @see https://stackoverflow.com/a/50480115/1793548\n   */\n  unlock() {\n    this.videoPlayer.play()\n    this.videoPlayer.pause()\n  }\n\n  /**\n   * Play current video.\n   *\n   * This method will preplay video beforehand. There are following reasons to\n   * do this:\n   * 1. solve the blinking problem when playing video on Android devices.\n   * 2. fetch metadata of video in advance, such as `duration`.\n   *\n   * @emits {play}\n   * @return {Promise} same as DOM API - `play()`\n   */\n  play() {\n    const { videoPlayer } = this\n\n    if (this.$ready) {\n      this.emit('play')\n      return this.nativePlay()\n    }\n\n    this.$preplayPromise =\n      this.$preplayPromise ||\n      new Promise((resolve) => {\n        const listener = () => {\n          const { currentTime } = videoPlayer\n          if (currentTime > 0) {\n            videoPlayer.removeEventListener('timeupdate', listener)\n            this.$ready = true\n            this.$readyTime = currentTime\n            videoPlayer.muted = false\n            this.emit('play')\n            resolve()\n          }\n        }\n        videoPlayer.addEventListener('timeupdate', listener)\n        videoPlayer.muted = true\n        this.nativePlay()\n      })\n    return this.$preplayPromise\n  }\n\n  nativePlay() {\n    super.nativePlay()\n    return this.videoPlayer.play()\n  }\n\n  nativePause() {\n    super.nativePause()\n    return this.videoPlayer.pause()\n  }\n}\n\nexport default HTML5Video\n"],"file":"HTML5Video.js"}