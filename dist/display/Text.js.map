{"version":3,"sources":["../../src/display/Text.js"],"names":["PIXI","string","Container","TextMetrics","TextOrigin","Text","TextStyle","measureText","text","style","canvas","styleObject","toString","lines","wrappedText","join","t","truncatedText","addChild","fixedWidth","undefined","suffix","suffixWidth","width","calcWidth","maxWidth","truncated","isShortThanMaxWidth","cannotBeShorten","length","end","sub","value","textDisplayObjects","paddingX","container","currentWidth","forEach","i","setPositionX","wordWrap","_canvas","font","toFontString","fontProperties","measureFont","fontSize","ascent","context","getContext","outputText","wordWrapCJK","split","lineWidths","Array","maxLineWidth","lineWidth","letterSpacing","Math","max","strokeThickness","dropShadow","dropShadowDistance","lineHeight","height","leading","line","cache","whiteSpace","collapseSpaces","collapseNewlines","canPrependSpaces","wordWrapWidth","tokens","tokenize","token","isNewline","addLine","currIsBreakingSpace","isBreakingSpace","lastIsBreakingSpace","tokenWidth","getFromCache","canBreakWords","breakWords","characters","j","char","k","nextChar","lastChar","canBreakChars","characterWidth","isLastToken"],"mappings":"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","sourcesContent":["import PIXI from '../core/PIXI'\nimport { string } from '../util'\n\nconst { Container, TextMetrics, Text: TextOrigin, TextStyle } = PIXI\n\nTextMetrics.measureText = measureText\n\nclass Text extends Container {\n  constructor(text, style = {}, canvas) {\n    super()\n\n    const styleObject = new TextStyle(style)\n    const { lines } = measureText(text.toString(), styleObject)\n    const wrappedText = lines.join('\\n')\n    const t = new TextOrigin(wrappedText, style, canvas)\n\n    this.t = t\n    this.style = style\n    this.truncatedText()\n\n    this.addChild(t)\n  }\n\n  truncatedText() {\n    const { t, style } = this\n    const { fixedWidth } = style\n\n    if (fixedWidth === undefined || fixedWidth <= 0) {\n      return\n    }\n\n    const suffix = '...'\n    const suffixWidth = new TextOrigin(suffix, style).width\n    const calcWidth = fixedWidth - suffixWidth\n    const maxWidth = calcWidth > 0 ? calcWidth : 0\n\n    let truncated = false\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const isShortThanMaxWidth = t.width < maxWidth\n      const cannotBeShorten = t.text.length === 0 && t.width >= maxWidth\n\n      if (isShortThanMaxWidth || cannotBeShorten) {\n        if (truncated) {\n          t.text += suffix\n        }\n\n        break\n      } else {\n        truncated = true\n        const text = t.text\n        const end = string.length(t.text) - 1\n        t.text = string.sub(text, 0, end)\n      }\n    }\n  }\n\n  static concat(textDisplayObjects, { paddingX = 0 } = {}) {\n    const container = new Container()\n\n    let currentWidth = 0\n    textDisplayObjects.forEach((text, i) => {\n      if (i > 0) {\n        currentWidth += paddingX\n      }\n\n      text.setPositionX(currentWidth)\n      currentWidth += text.width\n\n      container.addChild(text)\n    })\n\n    return container\n  }\n\n  set text(value) {\n    this.t.text = value\n    this.truncatedText()\n  }\n\n  get text() {\n    return this.t.text\n  }\n}\n\nexport default Text\n\n/**\n * OVERRIDES ORIGINAL PIXI CODE\n * Ensure CJK texts with external spaces is not wrapped:\n *\n *   Billy Brown 不是 1 只狗。\n *\n * PIXI VERSION: 5.1.1\n * + https://github.com/pixijs/pixi.js/blob/40e1e4a12518ee067c6871dcdd930602346197de/packages/text/src/TextMetrics.js#L100\n * + https://github.com/pixijs/pixi.js/blob/40e1e4a12518ee067c6871dcdd930602346197de/packages/text/src/TextMetrics.js#L169\n */\nfunction measureText(text, style, wordWrap, canvas = TextMetrics._canvas) {\n  wordWrap =\n    wordWrap === undefined || wordWrap === null ? style.wordWrap : wordWrap\n  const font = style.toFontString()\n  const fontProperties = TextMetrics.measureFont(font)\n\n  // fallback in case UA disallow canvas data extraction\n  // (toDataURI, getImageData functions)\n  if (fontProperties.fontSize === 0) {\n    fontProperties.fontSize = style.fontSize\n    fontProperties.ascent = style.fontSize\n  }\n\n  const context = canvas.getContext('2d')\n\n  context.font = font\n\n  const outputText = wordWrap ? wordWrapCJK(text, style, canvas) : text\n  const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/)\n  const lineWidths = new Array(lines.length)\n  let maxLineWidth = 0\n\n  for (let i = 0; i < lines.length; i++) {\n    const lineWidth =\n      context.measureText(lines[i]).width +\n      (lines[i].length - 1) * style.letterSpacing\n\n    lineWidths[i] = lineWidth\n    maxLineWidth = Math.max(maxLineWidth, lineWidth)\n  }\n  let width = maxLineWidth + style.strokeThickness\n\n  if (style.dropShadow) {\n    width += style.dropShadowDistance\n  }\n\n  const lineHeight =\n    style.lineHeight || fontProperties.fontSize + style.strokeThickness\n  let height =\n    Math.max(lineHeight, fontProperties.fontSize + style.strokeThickness) +\n    (lines.length - 1) * (lineHeight + style.leading)\n\n  if (style.dropShadow) {\n    height += style.dropShadowDistance\n  }\n\n  return new TextMetrics(\n    text,\n    style,\n    width,\n    height,\n    lines,\n    lineWidths,\n    lineHeight + style.leading,\n    maxLineWidth,\n    fontProperties\n  )\n}\n\nfunction wordWrapCJK(text, style, canvas = TextMetrics._canvas) {\n  const context = canvas.getContext('2d')\n\n  let width = 0\n  let line = ''\n  let lines = ''\n\n  const cache = {}\n  const { letterSpacing, whiteSpace } = style\n\n  // How to handle whitespaces\n  const collapseSpaces = TextMetrics.collapseSpaces(whiteSpace)\n  const collapseNewlines = TextMetrics.collapseNewlines(whiteSpace)\n\n  // whether or not spaces may be added to the beginning of lines\n  let canPrependSpaces = !collapseSpaces\n\n  // There is letterSpacing after every char except the last one\n  // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n  // so for convenience the above needs to be compared to width + 1 extra letterSpace\n  // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n  // ________________________________________________\n  // And then the final space is simply no appended to each line\n  const wordWrapWidth = style.wordWrapWidth + letterSpacing\n\n  // break text into words, spaces and newline chars\n  const tokens = TextMetrics.tokenize(text)\n\n  for (let i = 0; i < tokens.length; i++) {\n    // get the word, space or newlineChar\n    let token = tokens[i]\n\n    // if word is a new line\n    if (TextMetrics.isNewline(token)) {\n      // keep the new line\n      if (!collapseNewlines) {\n        lines += TextMetrics.addLine(line)\n        canPrependSpaces = !collapseSpaces\n        line = ''\n        width = 0\n        continue\n      }\n\n      // if we should collapse new lines\n      // we simply convert it into a space\n      token = ' '\n    }\n\n    // if we should collapse repeated whitespaces\n    if (collapseSpaces) {\n      // check both this and the last tokens for spaces\n      const currIsBreakingSpace = TextMetrics.isBreakingSpace(token)\n      const lastIsBreakingSpace = TextMetrics.isBreakingSpace(\n        line[line.length - 1]\n      )\n\n      if (currIsBreakingSpace && lastIsBreakingSpace) {\n        continue\n      }\n    }\n\n    // get word width from cache if possible\n    const tokenWidth = TextMetrics.getFromCache(\n      token,\n      letterSpacing,\n      cache,\n      context\n    )\n\n    // word is longer than desired bounds\n    if (tokenWidth + width > wordWrapWidth) {\n      // break large word over multiple lines\n      if (TextMetrics.canBreakWords(token, style.breakWords)) {\n        // break word into characters\n        const characters = token.split('')\n\n        // loop the characters\n        for (let j = 0; j < characters.length; j++) {\n          let char = characters[j]\n\n          let k = 1\n          // we are not at the end of the token\n\n          while (characters[j + k]) {\n            const nextChar = characters[j + k]\n            const lastChar = char[char.length - 1]\n\n            // should not split chars\n            if (\n              !TextMetrics.canBreakChars(\n                lastChar,\n                nextChar,\n                token,\n                j,\n                style.breakWords\n              )\n            ) {\n              // combine chars & move forward one\n              char += nextChar\n            } else {\n              break\n            }\n\n            k++\n          }\n\n          j += char.length - 1\n\n          const characterWidth = TextMetrics.getFromCache(\n            char,\n            letterSpacing,\n            cache,\n            context\n          )\n\n          if (characterWidth + width > wordWrapWidth) {\n            lines += TextMetrics.addLine(line)\n            canPrependSpaces = false\n            line = ''\n            width = 0\n          }\n\n          line += char\n          width += characterWidth\n        }\n      } else {\n        // if there are words in this line already\n        // finish that line and start a new one\n        if (line.length > 0) {\n          lines += TextMetrics.addLine(line)\n          line = ''\n          width = 0\n        }\n\n        const isLastToken = i === tokens.length - 1\n\n        // give it its own line if it's not the end\n        lines += TextMetrics.addLine(token, !isLastToken)\n        canPrependSpaces = false\n        line = ''\n        width = 0\n      }\n    } else {\n      // don't add spaces to the beginning of lines\n      if (\n        line.length > 0 ||\n        !TextMetrics.isBreakingSpace(token) ||\n        canPrependSpaces\n      ) {\n        // add the word to the current line\n        line += token\n\n        // update width counter\n        width += tokenWidth\n      }\n    }\n  }\n\n  lines += TextMetrics.addLine(line, false)\n\n  return lines\n}\n"],"file":"Text.js"}