{"version":3,"sources":["../../src/res/AdvancedResManager.js"],"names":["EventEmitter","ResManager","TimeMixer","AdvancedResManager","concurrency","mixTime","mixRatio","_ee_","currentProgressRM","currentProgressTM","loadComplete","time","ratio","on","once","off","rm","onProgress","add","progress","onProgressChange","onComplete","tm","load","newProgressRM","newProgressTM","emit"],"mappings":"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","sourcesContent":["import EventEmitter from 'eventemitter3'\nimport ResManager from './ResManager'\nimport TimeMixer from './TimeMixer'\n\nclass AdvancedResManager extends ResManager {\n  constructor({ concurrency = 10, mixTime = 1000, mixRatio = 0.2 } = {}) {\n    super('', concurrency)\n\n    this.mixTime = mixTime\n    this.mixRatio = mixRatio\n\n    this._ee_ = new EventEmitter()\n\n    this.currentProgressRM = 0\n    this.currentProgressTM = 0\n    this.loadComplete = false\n  }\n\n  setMix({ time, ratio } = {}) {\n    if (time) this.mixTime = time\n    if (ratio) this.mixRatio = ratio\n  }\n\n  on(...args) {\n    this._ee_.on(...args)\n  }\n\n  once(...args) {\n    this._ee_.once(...args)\n  }\n\n  off(...args) {\n    this._ee_.off(...args)\n  }\n\n  load() {\n    // resource manager\n    const rm = this\n    rm.onProgress.add(({ progress }) => {\n      this.onProgressChange({ rm: progress })\n    })\n    rm.onComplete.add(({ progress }) => {\n      this.onProgressChange({ rm: progress })\n    })\n\n    // time mixer\n    const { mixTime } = this\n    const tm = new TimeMixer(mixTime)\n    this.tm = tm\n    tm.onProgress.add(({ progress }) => {\n      this.onProgressChange({ tm: progress })\n    })\n    tm.onComplete.add(({ progress }) => {\n      this.onProgressChange({ tm: progress })\n    })\n\n    super.load()\n    this.tm.load()\n  }\n\n  onProgressChange({ rm, tm } = {}) {\n    const { mixRatio } = this\n\n    const { currentProgressRM, currentProgressTM } = this\n\n    const newProgressRM = rm || currentProgressRM\n    const newProgressTM = tm || currentProgressTM\n\n    this.currentProgressRM = newProgressRM\n    this.currentProgressTM = newProgressTM\n\n    const progress = (1 - mixRatio) * newProgressRM + mixRatio * newProgressTM\n\n    if (progress == 100) {\n      if (!this.loadComplete) {\n        this.loadComplete = true\n        this._ee_.emit('complete', progress)\n      }\n    } else {\n      this._ee_.emit('progress', progress)\n    }\n  }\n}\n\nAdvancedResManager.default = new AdvancedResManager()\n\nexport default AdvancedResManager\n"],"file":"AdvancedResManager.js"}