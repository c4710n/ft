{"version":3,"sources":["../../src/res/ResManager.js"],"names":["PIXI","fontLoader","patch","patchSpritesheetLoader","classname","$res","ResManager","args","queuedResources","use","url","name","push","type","replace","resource","resources","loadSpritesheet","loadGeneralResource","add","nu","json","image","data","meta","metadata","Error","texture","names","subname","_names","Array","isArray","subtexture","textures","texturesMap","spritesheet","Object","entries","sort","a","b","orderA","Number","parseInt","orderB","map","i","sound","res","$rm","Promise","resolve","reject","onComplete","onError","load","Loader"],"mappings":"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","sourcesContent":["import { PIXI } from '../core'\nimport fontLoader from './loader/font'\nimport { patch as patchSpritesheetLoader } from './loader/spritesheet'\nimport { classname } from '../util'\n\npatchSpritesheetLoader()\n\nlet $res\n\n/**\n * Resource manager built on the loader provided by PIXI.\n *\n * In FT, resources for `ResManager` must be registered in advance.\n * Because of that, you need to create a standalone module for `ResManager` in\n * order to achieve this.\n *\n * @example\n * // register-resources.js\n * import { ResManager } from 'ft'\n * import resources from '!val-loader?basedir=./res!ft/res/scan.val'\n * ResManager.register(resources)\n *\n * // Above code should be placed in a standalone file,\n * // Then, import `register-resources.js` after importing FT.\n * import { FT } from 'ft'\n * import './register-resources'\n */\nclass ResManager extends PIXI.Loader {\n  constructor(...args) {\n    super(...args)\n\n    this.queuedResources = []\n    this.use(fontLoader)\n  }\n\n  /**\n   * Register metadata of resources generated by res/scan.val.js\n   */\n  static register(res) {\n    $res = res\n  }\n\n  static async loadImage(url) {\n    const name = 'current'\n\n    const $rm = new ResManager()\n    $rm.add(name, url)\n    await new Promise(function (resolve, reject) {\n      $rm.onComplete.add(resolve)\n      $rm.onError.add(reject)\n      $rm.load()\n    })\n\n    return $rm.texture(name)\n  }\n\n  get res() {\n    return $res\n  }\n\n  /**\n   * Get url of resource.\n   */\n  url(...args) {\n    return $res.url(...args)\n  }\n\n  addImage(name) {\n    this.queuedResources.push({ name, type: 'image' })\n    return name\n  }\n\n  addFont(name) {\n    this.queuedResources.push({ name, type: 'webfont' })\n    name = name.replace('.', '')\n    return name\n  }\n\n  addSound(name) {\n    this.queuedResources.push({ name, type: 'sound' })\n    return name\n  }\n\n  addJSON(name) {\n    this.queuedResources.push({ name, type: 'json' })\n    return name\n  }\n\n  addSpritesheet(name) {\n    this.queuedResources.push({ name, type: 'spritesheet' })\n    return name\n  }\n\n  load() {\n    for (const resource of this.queuedResources) {\n      const { type, name } = resource\n\n      if (this.resources[name]) continue\n\n      switch (type) {\n        case 'spritesheet':\n          this.loadSpritesheet(name)\n          break\n        default:\n          this.loadGeneralResource(name)\n      }\n    }\n\n    return super.load()\n  }\n\n  /* general loader for loading image, webfont, sound, json */\n  loadGeneralResource(name) {\n    this.add(...$res.nu(name))\n  }\n\n  loadSpritesheet(name) {\n    const json = this.url(name, { type: 'json' })\n    const image = this.url(name, { type: 'image' })\n\n    this.add(name, json, {\n      data: {\n        meta: { image },\n      },\n      metadata: { image },\n    })\n  }\n\n  /**\n   * Get a texture by name.\n   */\n  texture(name) {\n    const resource = this.resources[name]\n    if (!resource) {\n      throw new Error(`[${classname(this)}] missing texture - ${name}`)\n    } else {\n      return resource.texture\n    }\n  }\n\n  /**\n   * Get sub texture by name.\n   */\n  subTexture(names, subname) {\n    let _names = []\n\n    if (Array.isArray(names)) {\n      _names = names\n    } else {\n      const name = names\n      _names.push(name)\n    }\n\n    for (const name of _names) {\n      const resource = this.resources[name]\n\n      if (!resource) {\n        throw new Error(`[${classname(this)}] missing texture - ${name}`)\n      } else {\n        const subtexture = resource.textures[subname]\n        if (subtexture) {\n          return subtexture\n        } else {\n          continue\n        }\n      }\n    }\n\n    throw new Error(`[${classname(this)}] missing subtexture - ${subname}`)\n  }\n\n  /**\n   * Get textures from spritesheets.\n   */\n  spritesheetTextures(names) {\n    let _names = []\n\n    if (Array.isArray(names)) {\n      _names = names\n    } else {\n      const name = names\n      _names.push(name)\n    }\n\n    let texturesMap = []\n\n    for (const name of _names) {\n      const spritesheet = this.resources[name]?.spritesheet\n\n      if (!spritesheet) {\n        throw new Error(`[${classname(this)}] missing spritesheet - ${name}`)\n      }\n\n      for (const [name, texture] of Object.entries(spritesheet.textures)) {\n        texturesMap.push({ name, texture })\n      }\n    }\n\n    const textures = texturesMap\n      .sort((a, b) => {\n        const orderA = Number.parseInt(a.name.replace(/[^0-9]/g, ''))\n        const orderB = Number.parseInt(b.name.replace(/[^0-9]/g, ''))\n\n        if (orderA > orderB) {\n          return 1\n        }\n\n        if (orderA < orderB) {\n          return -1\n        }\n\n        return 0\n      })\n      .map((i) => i.texture)\n\n    return textures\n  }\n\n  /**\n   * Get a sound by name.\n   */\n  sound(name) {\n    const resource = this.resources[name]\n    if (!resource) {\n      throw new Error(`[${classname(this)}] missing sound - ${name}`)\n    } else {\n      return resource.sound\n    }\n  }\n\n  /**\n   * Add a JSON data by name\n   */\n  json(name) {\n    const resource = this.resources[name]\n    if (!resource) {\n      throw new Error(`[${classname(this)}] missing json - ${name}`)\n    } else {\n      return resource.data\n    }\n  }\n}\n\nResManager.default = new ResManager()\n\nexport default ResManager\n"],"file":"ResManager.js"}