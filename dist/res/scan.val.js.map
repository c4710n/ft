{"version":3,"sources":["../../src/res/scan.val.js"],"names":["fs","require","path","fg","module","exports","basedir","_dir","realpathSync","self","__filename","paths","sync","filter","i","resources","map","$path","index","extname","basename","sepRE","RegExp","sep","name","replace","addSep","type","detectType","imports","join","objects","code","p","endsWith","types","re","test"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAC,WAAD,CAAlB;;AAEAG,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA;AAAF,IAAc,EAAf,KAAsB;AACrC,QAAMC,IAAI,GAAGP,EAAE,CAACQ,YAAH,CAAgBF,OAAhB,CAAb;;AAEA,QAAMG,IAAI,GAAGC,UAAb;AACA,QAAMC,KAAK,GAAGR,EAAE,CAACS,IAAH,CAAQ,CAAE,GAAEL,IAAK,OAAT,CAAR,EAA0BM,MAA1B,CAAkCC,CAAD,IAAOA,CAAC,KAAKL,IAA9C,CAAd;AACA,QAAMM,SAAS,GAAGJ,KAAK,CAACK,GAAN,CAAU,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC5C,UAAMC,OAAO,GAAGjB,IAAI,CAACiB,OAAL,CAAaF,KAAb,CAAhB;AACA,UAAMG,QAAQ,GAAGlB,IAAI,CAACkB,QAAL,CAAcH,KAAd,CAAjB;AAEA,UAAMI,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEpB,IAAI,CAACqB,GAAI,EAAvB,EAA0B,GAA1B,CAAd;AACA,UAAMC,IAAI,GAAGP,KAAK,CACfQ,OADU,CACFC,MAAM,CAACnB,IAAD,CADJ,EACY,EADZ,EACgB;AADhB,KAEVkB,OAFU,CAEFJ,KAFE,EAEK,GAFL,EAGVI,OAHU,CAGFN,OAHE,EAGO,EAHP,CAAb;AAKA,UAAMf,MAAM,GAAI,WAAUc,KAAM,EAAhC;AACA,UAAMS,IAAI,GAAGC,UAAU,CAACT,OAAD,CAAvB;AAEA,WAAO;AACLf,MAAAA,MADK;AAELoB,MAAAA,IAFK;AAGLJ,MAAAA,QAHK;AAILO,MAAAA,IAJK;AAKLzB,MAAAA,IAAI,EAAEe;AALD,KAAP;AAOD,GApBiB,CAAlB;AAsBA,QAAMY,OAAO,GAAGd,SAAS,CACtBC,GADa,CACT,CAAC;AAAEZ,IAAAA,MAAF;AAAUF,IAAAA;AAAV,GAAD,KAAuB,UAASE,MAAO,UAASF,IAAK,GAD5C,EAEb4B,IAFa,CAER,IAFQ,CAAhB;AAGA,QAAMC,OAAO,GAAGhB,SAAS,CACtBC,GADa,CAEZ,CAAC;AAAEZ,IAAAA,MAAF;AAAUoB,IAAAA,IAAV;AAAgBJ,IAAAA,QAAhB;AAA0BO,IAAAA;AAA1B,GAAD,KACG,aAAYH,IAAK,iBAAgBJ,QAAS,aAAYO,IAAK,WAAUvB,MAAO,GAHnE,EAKb0B,IALa,CAKR,KALQ,CAAhB;AAOA,QAAME,IAAI,GAAI;AAChB,EAAEH,OAAQ;AACV;AACA,EAAEE,OAAQ;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjDE;AAkDA,SAAO;AAAEC,IAAAA;AAAF,GAAP;AACD,CAxFD;;AA0FA,SAASN,MAAT,CAAgBO,CAAhB,EAAmB;AACjB,QAAM;AAAEV,IAAAA;AAAF,MAAUrB,IAAhB;AACA,SAAO+B,CAAC,CAACC,QAAF,CAAWX,GAAX,IAAkBU,CAAlB,GAAuB,GAAEA,CAAE,GAAEV,GAAI,EAAxC;AACD;;AAED,SAASK,UAAT,CAAoBT,OAApB,EAA6B;AAC3B,QAAMgB,KAAK,GAAG,CACZ;AACER,IAAAA,IAAI,EAAE,OADR;AAEES,IAAAA,EAAE,EAAE;AAFN,GADY,EAKZ;AACET,IAAAA,IAAI,EAAE,OADR;AAEES,IAAAA,EAAE,EAAE;AAFN,GALY,EASZ;AACET,IAAAA,IAAI,EAAE,OADR;AAEES,IAAAA,EAAE,EAAE;AAFN,GATY,EAaZ;AACE;AACAT,IAAAA,IAAI,EAAE,QAFR;AAGES,IAAAA,EAAE,EAAE;AAHN,GAbY,EAkBZ;AACE;AACAT,IAAAA,IAAI,EAAE,MAFR;AAGES,IAAAA,EAAE,EAAE;AAHN,GAlBY,EAuBZ;AACET,IAAAA,IAAI,EAAE,MADR;AAEES,IAAAA,EAAE,EAAE;AAFN,GAvBY,EA2BZ;AACET,IAAAA,IAAI,EAAE,OADR;AAEES,IAAAA,EAAE,EAAE;AAFN,GA3BY,EA+BZ;AACET,IAAAA,IAAI,EAAE,MADR;AAEES,IAAAA,EAAE,EAAE;AAFN,GA/BY,EAmCZ;AACET,IAAAA,IAAI,EAAE,MADR;AAEES,IAAAA,EAAE,EAAE;AAFN,GAnCY,CAAd;;AAyCA,OAAK,MAAM;AAAET,IAAAA,IAAF;AAAQS,IAAAA;AAAR,GAAX,IAA2BD,KAA3B,EAAkC;AAChC,QAAIC,EAAE,CAACC,IAAH,CAAQlB,OAAR,CAAJ,EAAsB;AACpB,aAAOQ,IAAP;AACD;AACF;;AAED,SAAO,SAAP;AACD","sourcesContent":["/* eslint-env node */\n\n/**\n * This module scan a directory and generate an array containing metadatas of\n * resources.\n * Currently, this module needs webpack and val-loader.\n *\n * Usage:\n *   import res from '!val-loader?basedir=./basedirOfResources!ft/res/scan'\n *\n * @example\n * // structure of metadata array.\n * [\n *   {\n *     name: 'playground.bg',\n *     basename: 'bg.jpg',\n *     type: 'image',\n *     url: 'media/bg.585ec2df.jpg'\n *   },\n *   // ...\n * ]\n */\n\nconst fs = require('fs')\nconst path = require('path')\nconst fg = require('fast-glob')\n\nmodule.exports = ({ basedir } = {}) => {\n  const _dir = fs.realpathSync(basedir)\n\n  const self = __filename\n  const paths = fg.sync([`${_dir}/**/*`]).filter((i) => i !== self)\n  const resources = paths.map(($path, index) => {\n    const extname = path.extname($path)\n    const basename = path.basename($path)\n\n    const sepRE = new RegExp(`${path.sep}`, 'g')\n    const name = $path\n      .replace(addSep(_dir), '') // remove useless prefix\n      .replace(sepRE, '.')\n      .replace(extname, '')\n\n    const module = `resource${index}`\n    const type = detectType(extname)\n\n    return {\n      module,\n      name,\n      basename,\n      type,\n      path: $path,\n    }\n  })\n\n  const imports = resources\n    .map(({ module, path }) => `import ${module} from '${path}'`)\n    .join('\\n')\n  const objects = resources\n    .map(\n      ({ module, name, basename, type }) =>\n        `  {name: '${name}', basename: '${basename}', type: '${type}', url: ${module}}`\n    )\n    .join(',\\n')\n\n  const code = `\n${imports}\nconst objects = [\n${objects}\n]\n\nobjects.url = function(name, { type, basename = false } = {}) {\n  const resource = this.find(resource => {\n    if (basename) {\n      return resource.basename === name\n    } else {\n      if (type) {\n        return resource.name === name && resource.type === type\n      } else {\n        return resource.name === name\n      }\n    }\n  })\n\n  if (!resource) {\n    throw new Error(\"[res scanner] can't find resource - \" + name + \"(\" + type + \")\")\n  }\n\n  const { url } = resource\n  return url\n}\n\nobjects.nu = function(name, { type } = {}) {\n  const url = this.url(name, { type })\n  return [name, url]\n}\n\nobjects.type = function(name) {\n  const resource = this.find(resource => resource.name === name)\n  const { type } = resource\n  return type\n}\n\nobjects.group = function(prefix, { type } = {}) {\n  let resources = this.filter(({ name }) => name.startsWith(prefix))\n\n  if (type) {\n    resources = resources.filter(({ type: $type }) => $type === type)\n  }\n\n  return resources\n}\n\nexport default objects\n`\n  return { code }\n}\n\nfunction addSep(p) {\n  const { sep } = path\n  return p.endsWith(sep) ? p : `${p}${sep}`\n}\n\nfunction detectType(extname) {\n  const types = [\n    {\n      type: 'image',\n      re: /\\.(png|jpg|jpeg|gif)/,\n    },\n    {\n      type: 'audio',\n      re: /\\.(mp3|m4a)/,\n    },\n    {\n      type: 'video',\n      re: /\\.(mp4)/,\n    },\n    {\n      // deprecated: format for jsmpeg\n      type: 'mpegts',\n      re: /\\.(ts)/,\n    },\n    {\n      // format for jsmpeg\n      type: 'mpeg',\n      re: /\\.(mpeg)/,\n    },\n    {\n      type: 'json',\n      re: /\\.(json)/,\n    },\n    {\n      type: 'atlas',\n      re: /\\.(atlas)/,\n    },\n    {\n      type: 'font',\n      re: /\\.(ttf|woff2|woff|otf|eot)/,\n    },\n    {\n      type: 'text',\n      re: /\\.(txt|cfg)/,\n    },\n  ]\n\n  for (const { type, re } of types) {\n    if (re.test(extname)) {\n      return type\n    }\n  }\n\n  return 'unknown'\n}\n"],"file":"scan.val.js"}