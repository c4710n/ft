{"version":3,"sources":["../../src/scene/SceneManager.js"],"names":["app","classname","qs","state","SceneManager","registeredScenes","currentScene","name","Class","push","args","unique","oneOff","index","translate","get","allowInteraction","getRegisteredScene","$name","nextScene","stage","addChildAt","addChild","_translateOut","_translateIn","cleanup","launchedScene","launched","nameOrScene","scene","qo","parse","__scene__","load","scenes","children","forEach","removeChild","persistent","destroy","texture","baseTexture","find","s","providedSceneName","providedScene"],"mappings":"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","sourcesContent":["import app from '../app'\nimport { classname, qs } from '../util'\nimport state from '../state'\n\nclass SceneManager {\n  constructor() {\n    /**\n     * Store all registered scenes.\n     * @access private\n     */\n    this.registeredScenes = []\n\n    /**\n     * Store currentc scene\n     * @access private\n     */\n    this.currentScene = null\n  }\n\n  /**\n   * Register a scene.\n   * @param {string} name name of scene\n   * @param {Scene} Class subclass of {@link Scene}\n   */\n  register(name, Class) {\n    this.registeredScenes.push({\n      name,\n      Class,\n    })\n  }\n\n  /**\n   * Start a scene with cleaning up other scenes.\n   */\n  async load(\n    name,\n    { args = [], unique = false, oneOff = false, index, translate } = {}\n  ) {\n    if (unique && this.get(name)) return\n\n    state.allowInteraction = false\n\n    // find registered scene, then create an instance of the scene\n    const { Class, name: $name } = this.getRegisteredScene(name)\n    const nextScene = new Class($name, ...args)\n    nextScene.oneOff = oneOff\n\n    // add instance of scene into stage\n    if (typeof index === 'number') {\n      app.stage.addChildAt(nextScene, index)\n    } else {\n      app.stage.addChild(nextScene)\n    }\n\n    const { currentScene } = this\n    if (translate) {\n      // custom logic for translate\n      await translate(currentScene, nextScene)\n    } else {\n      // default logic for translate\n      if (currentScene) {\n        await currentScene._translateOut()\n      }\n\n      await nextScene._translateIn()\n    }\n\n    this.currentScene = nextScene\n\n    this.cleanup()\n\n    state.allowInteraction = true\n\n    return true\n  }\n\n  /**\n   * Start a scene without cleaning up other scenes.\n   */\n  async launch(\n    name,\n    { args = [], unique = false, oneOff = false, index } = {}\n  ) {\n    if (unique && this.get(name)) return\n\n    state.allowInteraction = false\n\n    const { Class, name: $name } = this.getRegisteredScene(name)\n    const launchedScene = new Class($name, ...args)\n    launchedScene.oneOff = oneOff\n    launchedScene.launched = true\n\n    if (typeof index === 'number') {\n      app.stage.addChildAt(launchedScene, index)\n    } else {\n      app.stage.addChild(launchedScene)\n    }\n\n    await launchedScene._translateIn()\n\n    state.allowInteraction = true\n\n    return true\n  }\n\n  launchSync(name, { args = [], unique = false, oneOff = false, index } = {}) {\n    if (unique && this.get(name)) return\n\n    state.allowInteraction = false\n\n    const { Class, name: $name } = this.getRegisteredScene(name)\n    const launchedScene = new Class($name, ...args)\n    launchedScene.oneOff = oneOff\n    launchedScene.launched = true\n\n    if (typeof index === 'number') {\n      app.stage.addChildAt(launchedScene, index)\n    } else {\n      app.stage.addChild(launchedScene)\n    }\n\n    state.allowInteraction = true\n\n    return true\n  }\n\n  async setCurrent(nameOrScene) {\n    const scene = this.get(nameOrScene)\n    scene.launched = false\n    this.currentScene = scene\n  }\n\n  /**\n   * Load scene according `scene` field in querystring\n   */\n  qsload() {\n    const qo = qs.parse()\n    const { __scene__: name } = qo\n\n    if (name) {\n      return this.load(name)\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Cleanup useless actived scenes\n   * @access private\n   */\n  cleanup() {\n    const scenes = app.stage.children\n\n    scenes.forEach((scene) => {\n      if (scene.launched || scene === this.currentScene) {\n        return\n      }\n\n      app.stage.removeChild(scene)\n\n      if (!scene.persistent) {\n        scene.destroy({\n          children: true,\n          texture: scene.oneOff,\n          baseTexture: scene.oneOff,\n        })\n      }\n    })\n  }\n\n  /**\n   * Unload a scene by name explicitly.\n   */\n  async unload(name, { destroy = true } = {}) {\n    const scene = this.get(name)\n    if (scene) {\n      state.allowInteraction = false\n\n      await scene._translateOut()\n\n      app.stage.removeChild(scene)\n\n      if (destroy) {\n        scene.destroy({\n          children: true,\n          texture: scene.oneOff,\n          baseTexture: scene.oneOff,\n        })\n      }\n\n      state.allowInteraction = true\n    }\n  }\n\n  /**\n   * Get a registered scene.\n   */\n  getRegisteredScene(name) {\n    const scene = this.registeredScenes.find((s) => s.name === name)\n    if (!scene) {\n      throw `[${classname(this)}] failed to get unregistered scene - ${name}`\n    }\n    return scene\n  }\n\n  /**\n   * Get a started scene by name or reference.\n   */\n  get(nameOrScene) {\n    let scene\n\n    const scenes = app.stage.children\n\n    if (typeof nameOrScene === 'string') {\n      const providedSceneName = nameOrScene\n      scene = scenes.find((s) => s.name === providedSceneName)\n    } else {\n      const providedScene = nameOrScene\n      scene = scenes.find((s) => s === providedScene)\n    }\n\n    return scene\n  }\n}\n\nSceneManager.default = new SceneManager()\n\nexport default SceneManager\n"],"file":"SceneManager.js"}