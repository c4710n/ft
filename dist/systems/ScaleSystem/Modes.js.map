{"version":3,"sources":["../../../src/systems/ScaleSystem/Modes.js"],"names":["ORIENTATION","getGameOrientation","width","height","LANDSCAPE","PORTRAIT","getViewportOrientation","isOrientationMatched","viewportCSSWidth","viewportCSSHeight","generate","calcFunction","shouldRotate","position","scale","offsetCSSX","offsetCSSY","boundsLeft","boundsRight","boundsTop","boundsBottom","boundsWidth","boundsHeight","bounds","left","right","top","bottom","viewport","cssWidth","cssHeight","calcCover","Math","max","calcContain","min","COVER","CONTAIN"],"mappings":"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","sourcesContent":["import ORIENTATION from './ORIENTATION'\n\nfunction getGameOrientation(width, height) {\n  return width >= height ? ORIENTATION.LANDSCAPE : ORIENTATION.PORTRAIT\n}\n\nfunction getViewportOrientation(width, height) {\n  return width >= height ? ORIENTATION.LANDSCAPE : ORIENTATION.PORTRAIT\n}\n\nfunction isOrientationMatched(\n  width,\n  height,\n  viewportCSSWidth,\n  viewportCSSHeight\n) {\n  return (\n    getGameOrientation(width, height) ===\n    getViewportOrientation(viewportCSSWidth, viewportCSSHeight)\n  )\n}\n\nfunction generate(\n  width,\n  height,\n  viewportCSSWidth,\n  viewportCSSHeight,\n  calcFunction\n) {\n  const shouldRotate = !isOrientationMatched(\n    width,\n    height,\n    viewportCSSWidth,\n    viewportCSSHeight\n  )\n\n  if (shouldRotate) {\n    ;[viewportCSSWidth, viewportCSSHeight] = [\n      viewportCSSHeight,\n      viewportCSSWidth,\n    ]\n  }\n\n  const position = calcFunction(\n    width,\n    height,\n    viewportCSSWidth,\n    viewportCSSHeight\n  )\n  const { scale, offsetCSSX, offsetCSSY } = position\n\n  let boundsLeft\n  let boundsRight\n  let boundsTop\n  let boundsBottom\n  let boundsWidth\n  let boundsHeight\n  if (offsetCSSX >= 0) {\n    boundsLeft = 0\n    boundsRight = width\n    boundsWidth = width\n  } else {\n    boundsLeft = -offsetCSSX / scale\n    boundsRight = (viewportCSSWidth - offsetCSSX) / scale\n    boundsWidth = viewportCSSWidth / scale\n  }\n\n  if (offsetCSSY >= 0) {\n    boundsTop = 0\n    boundsBottom = height\n    boundsHeight = height\n  } else {\n    boundsTop = -offsetCSSY / scale\n    boundsBottom = (viewportCSSHeight - offsetCSSY) / scale\n    boundsHeight = viewportCSSHeight / scale\n  }\n\n  const bounds = {\n    left: boundsLeft,\n    right: boundsRight,\n    top: boundsTop,\n    bottom: boundsBottom,\n    width: boundsWidth,\n    height: boundsHeight,\n  }\n\n  const viewport = {\n    cssWidth: viewportCSSWidth,\n    cssHeight: viewportCSSHeight,\n  }\n\n  return {\n    shouldRotate,\n    position,\n    bounds,\n    viewport,\n  }\n}\n\nfunction calcCover(width, height, viewportCSSWidth, viewportCSSHeight) {\n  const scale = Math.max(viewportCSSWidth / width, viewportCSSHeight / height)\n\n  const offsetCSSX = (viewportCSSWidth - width * scale) / 2\n  const offsetCSSY = (viewportCSSHeight - height * scale) / 2\n\n  return { scale, offsetCSSX, offsetCSSY }\n}\n\nfunction calcContain(width, height, viewportCSSWidth, viewportCSSHeight) {\n  const scale = Math.min(viewportCSSWidth / width, viewportCSSHeight / height)\n\n  const offsetCSSX = (viewportCSSWidth - width * scale) / 2\n  const offsetCSSY = (viewportCSSHeight - height * scale) / 2\n  return { scale, offsetCSSX, offsetCSSY }\n}\n\nexport function COVER(width, height, viewportCSSWidth, viewportCSSHeight) {\n  return generate(width, height, viewportCSSWidth, viewportCSSHeight, calcCover)\n}\n\nexport function CONTAIN(width, height, viewportCSSWidth, viewportCSSHeight) {\n  return generate(\n    width,\n    height,\n    viewportCSSWidth,\n    viewportCSSHeight,\n    calcContain\n  )\n}\n\nexport default {\n  COVER,\n  CONTAIN,\n}\n"],"file":"Modes.js"}