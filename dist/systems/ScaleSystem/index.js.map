{"version":3,"sources":["../../../src/systems/ScaleSystem/index.js"],"names":["app","System","modes","events","classname","ScaleSystem","mode","container","resize","on","width","height","scale","viewportCSSWidth","viewportCSSHeight","systems","render","scaleMode","Error","shouldRotate","position","bounds","viewport","rotate","size","screen","offsetCSSX","offsetCSSY","rotation","baseOffsetCSSX","baseOffsetCSSY","cssHeight","style","transformOrigin","transform"],"mappings":"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","sourcesContent":["import app from '../../app'\nimport System from '../System'\nimport modes from './Modes'\nimport events from '../../events'\nimport { classname } from '../../util'\n\nclass ScaleSystem extends System {\n  constructor({ mode = 'COVER' } = {}) {\n    super('scale')\n\n    this.container = app.container\n    this.mode = mode\n\n    events.resize.on(({ width, height }) => {\n      this.scale(width, height)\n    }, this)\n  }\n\n  /**\n   * @access private\n   */\n  scale(viewportCSSWidth, viewportCSSHeight) {\n    const { width, height } = app.systems.render\n\n    const { mode } = this\n    const scaleMode = modes[mode]\n\n    if (!scaleMode) {\n      throw new Error(`[${classname(this)}] unsupported scale mode - ${mode}`)\n    }\n    const { shouldRotate, position, bounds, viewport } = scaleMode(\n      width,\n      height,\n      viewportCSSWidth,\n      viewportCSSHeight\n    )\n\n    this.rotate = shouldRotate\n    this.position = position\n    this.bounds = bounds\n    app.size.screen = bounds\n    this.viewport = viewport\n\n    let { scale, offsetCSSX, offsetCSSY } = position\n    let rotation = 0\n\n    if (shouldRotate) {\n      rotation = 90\n      const baseOffsetCSSX = 0\n      const baseOffsetCSSY = viewport.cssHeight\n\n      offsetCSSX = baseOffsetCSSX + offsetCSSX\n      offsetCSSY = baseOffsetCSSY - offsetCSSY\n      ;[offsetCSSX, offsetCSSY] = [offsetCSSY, offsetCSSX]\n    }\n\n    this.container.style.position = 'absolute'\n    this.container.style.width = `${width}px`\n    this.container.style.height = `${height}px`\n    this.container.style.transformOrigin = '0 0'\n    this.container.style.transform = `matrix(${scale}, 0, 0, ${scale}, ${offsetCSSX}, ${offsetCSSY}) rotate(${rotation}deg)`\n  }\n}\n\nexport default ScaleSystem\n"],"file":"index.js"}