{"version":3,"sources":["../../src/time/delay.js"],"names":["app","delay","ms","Promise","resolve","start","performance","now","timer","ticker","remove","add"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,QAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,KAAT,CAAeC,EAAf,EAAmB;AACjB,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,QAAMC,KAAK,GAAGC,WAAW,CAACC,GAAZ,EAAd;;AACA,QAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AAClB,UAAMD,GAAG,GAAGD,WAAW,CAACC,GAAZ,EAAZ;;AACA,UAAIA,GAAG,GAAGF,KAAN,GAAcH,EAAlB,EAAsB;AACpBE,QAAAA,OAAO;AACPJ,QAAAA,GAAG,CAACS,MAAJ,CAAWC,MAAX,CAAkBF,KAAlB;AACD;AACF,KAND;;AAQAR,IAAAA,GAAG,CAACS,MAAJ,CAAWE,GAAX,CAAeH,KAAf;AACD,GAXM,CAAP;AAYD;;AAED,eAAeP,KAAf","sourcesContent":["import app from '../app'\n\n/**\n * A delay timer based on FT.ticker.\n *\n * @param {number} ms specified time in milliseconds.\n * @return {Promise} a promise will be resolved when timeout.\n */\nfunction delay(ms) {\n  return new Promise((resolve) => {\n    const start = performance.now()\n    const timer = () => {\n      const now = performance.now()\n      if (now - start > ms) {\n        resolve()\n        app.ticker.remove(timer)\n      }\n    }\n\n    app.ticker.add(timer)\n  })\n}\n\nexport default delay\n"],"file":"delay.js"}