{"version":3,"sources":["../../src/time/timeout.js"],"names":["app","classname","Timer","timeout","callback","Error","ticker","isTickerStopped","startTime","performance","now","startTick","stopTick","start","duration","add","check","remove","time"],"mappings":";;;;;;;;AAAA,OAAOA,GAAP,MAAgB,QAAhB;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,K;AACJ;AACF;AACA;AACE,iBAAYC,OAAZ,EAAqBC,QAArB,EAA+B;AAAA;;AAC7B,QAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,YAAM,IAAIE,KAAJ,YAAcJ,SAAS,CAAC,IAAD,CAAvB,2BAAN;AACD;;AAED,SAAKE,OAAL,GAAeA,OAAf;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKE,MAAL,GAAcN,GAAG,CAACM,MAAlB;AACA,SAAKC,eAAL,GAAuB,IAAvB;AAEA,SAAKC,SAAL,GAAiB,CAAjB;AACD;;;;WAED,iBAAQ;AACN,WAAKA,SAAL,GAAiBC,WAAW,CAACC,GAAZ,EAAjB;AACA,WAAKC,SAAL;AACD;;;WAED,gBAAO;AACL,WAAKC,QAAL;AACD;;;WAED,iBAAQ;AACN,UAAI,KAAKL,eAAT,EAA0B;AACxB,aAAKM,KAAL;AACD,OAFD,MAEO;AACL,aAAKL,SAAL,GAAiBC,WAAW,CAACC,GAAZ,EAAjB;AACD;AACF;;;WAED,iBAAQ;AACN,UAAI,KAAKI,QAAL,GAAgB,KAAKX,OAAzB,EAAkC;AAChC,aAAKS,QAAL;;AAEA,YAAI,KAAKR,QAAT,EAAmB;AACjB,eAAKA,QAAL;AACD;AACF;AACF;;;SAED,eAAe;AACb,UAAMM,GAAG,GAAGD,WAAW,CAACC,GAAZ,EAAZ;AACA,aAAOA,GAAG,GAAG,KAAKF,SAAlB;AACD;;;WAED,qBAAY;AACV,WAAKD,eAAL,GAAuB,KAAvB;AACA,WAAKD,MAAL,CAAYS,GAAZ,CAAgB,KAAKC,KAArB,EAA4B,IAA5B;AACD;;;WAED,oBAAW;AACT,WAAKT,eAAL,GAAuB,IAAvB;AACA,WAAKD,MAAL,CAAYW,MAAZ,CAAmB,KAAKD,KAAxB,EAA+B,IAA/B;AACD;;;;;;AAGH,SAASb,OAAT,CAAiBe,IAAjB,EAAuBd,QAAvB,EAAiC;AAC/B,SAAO,IAAIF,KAAJ,CAAUgB,IAAV,EAAgBd,QAAhB,CAAP;AACD;;AAED,eAAeD,OAAf","sourcesContent":["import app from '../app'\nimport classname from '../util/classname'\n\n/**\n * A timer via\n *\n * @example\n * const timer = new Timer(500, callback)\n *\n * // start timer\n * timer.start()\n *\n * // stop timer\n * timer.stop()\n *\n * // reset timer\n * timer.reset()\n *\n */\nclass Timer {\n  /**\n   * @param {number} timeout timeout in milliseconds.\n   */\n  constructor(timeout, callback) {\n    if (typeof timeout !== 'number') {\n      throw new Error(`[${classname(this)}] timeout is required`)\n    }\n\n    this.timeout = timeout\n    this.callback = callback\n    this.ticker = app.ticker\n    this.isTickerStopped = true\n\n    this.startTime = 0\n  }\n\n  start() {\n    this.startTime = performance.now()\n    this.startTick()\n  }\n\n  stop() {\n    this.stopTick()\n  }\n\n  reset() {\n    if (this.isTickerStopped) {\n      this.start()\n    } else {\n      this.startTime = performance.now()\n    }\n  }\n\n  check() {\n    if (this.duration > this.timeout) {\n      this.stopTick()\n\n      if (this.callback) {\n        this.callback()\n      }\n    }\n  }\n\n  get duration() {\n    const now = performance.now()\n    return now - this.startTime\n  }\n\n  startTick() {\n    this.isTickerStopped = false\n    this.ticker.add(this.check, this)\n  }\n\n  stopTick() {\n    this.isTickerStopped = true\n    this.ticker.remove(this.check, this)\n  }\n}\n\nfunction timeout(time, callback) {\n  return new Timer(time, callback)\n}\n\nexport default timeout\n"],"file":"timeout.js"}