{"version":3,"sources":["../../src/util/random.js"],"names":["randomFloat","min","max","includeMax","r","Math","random","randomInteger","floor","float","getRandomElements","array","num","total","length","n","shuffledArray","sort","selected","slice","getRandomSeparatedElements","rest","getSequentialRandomSeparatedElements","maxSliceEnd","sliceEnd","begin","end","concat","getRandomElement","maxIndex","randomIndex","randomOne"],"mappings":"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","sourcesContent":["export function randomFloat({ min = 0, max, includeMax = false }) {\n  if (min === 0) {\n    if (includeMax) {\n      // [0, max]\n      const r = Math.random() * (max + 1)\n      return r > max ? max : r\n    } else {\n      // [0, max)\n      return Math.random() * max\n    }\n  } else {\n    if (includeMax) {\n      // [min, max]\n      const r = Math.random() * (max - min + 1) + min\n      return r > max ? max : r\n    } else {\n      // [min, max)\n      return Math.random() * (max - min) + min\n    }\n  }\n}\n\nexport function randomInteger({ min = 0, max, includeMax = false }) {\n  if (min === 0) {\n    if (includeMax) {\n      // [0, max]\n      return Math.floor(Math.random() * (max + 1))\n    } else {\n      // [0, max)\n      return Math.floor(Math.random() * max)\n    }\n  } else {\n    if (includeMax) {\n      // [min, max]\n      return Math.floor(Math.random() * (max - min + 1)) + min\n    } else {\n      // [min, max)\n      return Math.floor(Math.random() * (max - min)) + min\n    }\n  }\n}\n\nfunction random({ min, max, float = false, includeMax = false }) {\n  if (float) {\n    return randomFloat({ min, max, includeMax })\n  } else {\n    return randomInteger({ min, max, includeMax })\n  }\n}\n\nexport function getRandomElements(array, num) {\n  const total = array.length\n\n  const n = num > total ? total : num\n\n  const shuffledArray = array.sort(() => 0.5 - Math.random())\n  const selected = shuffledArray.slice(0, n)\n  return selected\n}\n\nexport function getRandomSeparatedElements(array, num) {\n  const total = array.length\n\n  const n = num > total ? total : num\n\n  const shuffledArray = array.slice().sort(() => 0.5 - Math.random())\n  const selected = shuffledArray.slice(0, n)\n  const rest = shuffledArray.slice(n, total)\n\n  return [selected, rest]\n}\n\nexport function getSequentialRandomSeparatedElements(array, num) {\n  const total = array.length\n\n  const n = num > total ? total : num\n\n  const maxSliceEnd = total - n\n  const sliceEnd = randomInteger(maxSliceEnd)\n\n  const selected = array.slice(sliceEnd, sliceEnd + n)\n  const begin = array.slice(0, sliceEnd)\n  const end = array.slice(sliceEnd + n)\n  const rest = [].concat(begin, end)\n\n  return [selected, rest]\n}\n\nexport function getRandomElement(array) {\n  const maxIndex = array.length - 1\n  const randomIndex = Math.floor(Math.random() * (maxIndex + 1))\n  const randomOne = array[randomIndex]\n  return randomOne\n}\n\nexport default random\n"],"file":"random.js"}