{"version":3,"sources":["../../src/util/string.js"],"names":["stringLength","length","sub","string","start","end","substring","index","char","shuffle","chars","split","i","j","Math","floor","random","temp","join"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,YAAP,MAAyB,eAAzB;AAEA,OAAO,IAAMC,MAAM,GAAGD,YAAf;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,GAAT,CAAaC,MAAb,EAAqBC,KAArB,EAA4BC,GAA5B,EAAiC;AACtC,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,KAAK,GAAG,CAAZ;;AAFsC,6CAInBJ,MAJmB;AAAA;;AAAA;AAItC,wDAA2B;AAAA,UAAhBK,KAAgB;;AACzB,UAAID,KAAK,IAAIH,KAAT,IAAkBG,KAAK,GAAGF,GAA9B,EAAmC;AACjCC,QAAAA,SAAS,IAAIE,KAAb;AACD;;AACDD,MAAAA,KAAK,IAAI,CAAT;AAEA,UAAIA,KAAK,KAAKF,GAAd,EAAmB;AACpB;AAXqC;AAAA;AAAA;AAAA;AAAA;;AAatC,SAAOC,SAAP;AACD;AAED,OAAO,SAASG,OAAT,CAAiBN,MAAjB,EAAyB;AAC9B,MAAMO,KAAK,GAAGP,MAAM,CAACQ,KAAP,CAAa,EAAb,CAAd;;AAEA,OAAK,IAAIC,CAAC,GAAGF,KAAK,CAACT,MAAN,GAAe,CAA5B,EAA+BW,CAAC,GAAG,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;AACzC,QAAMC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBJ,CAAC,GAAG,CAArB,CAAX,CAAV;AACA,QAAMK,IAAI,GAAGP,KAAK,CAACE,CAAD,CAAlB;AACAF,IAAAA,KAAK,CAACE,CAAD,CAAL,GAAWF,KAAK,CAACG,CAAD,CAAhB;AACAH,IAAAA,KAAK,CAACG,CAAD,CAAL,GAAWI,IAAX;AACD;;AAED,SAAOP,KAAK,CAACQ,IAAN,CAAW,EAAX,CAAP;AACD;AAED,eAAe;AACbjB,EAAAA,MAAM,EAANA,MADa;AAEbC,EAAAA,GAAG,EAAHA,GAFa;AAGbO,EAAAA,OAAO,EAAPA;AAHa,CAAf","sourcesContent":["import stringLength from 'string-length'\n\nexport const length = stringLength\n\n/**\n * Safe substring of Unicode characters.\n *\n * @param {string} string a string.\n * @param {number} start index for start point.\n * @param {number} end index for end point.\n * @return {string} a new string containing the specified part of the given string.\n */\nexport function sub(string, start, end) {\n  let substring = ''\n  let index = 0\n\n  for (const char of string) {\n    if (index >= start && index < end) {\n      substring += char\n    }\n    index += 1\n\n    if (index === end) break\n  }\n\n  return substring\n}\n\nexport function shuffle(string) {\n  const chars = string.split('')\n\n  for (let i = chars.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1))\n    const temp = chars[i]\n    chars[i] = chars[j]\n    chars[j] = temp\n  }\n\n  return chars.join('')\n}\n\nexport default {\n  length,\n  sub,\n  shuffle,\n}\n"],"file":"string.js"}