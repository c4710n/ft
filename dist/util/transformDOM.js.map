{"version":3,"sources":["../../src/util/transformDOM.js"],"names":["app","transformDOM","dom","displayObject","layer","width","height","alpha","worldAlpha","angle","visible","getGlobalPosition","$x","x","$y","y","pivotX","pivotY","anchor","anchorX","anchorY","pivot","stagePosition","stage","style","position","display","left","top","zIndex","opacity","transformOrigin","transform"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,QAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,YAAT,CAAsBC,GAAtB,EAA2BC,aAA3B,EAA0CC,KAA1C,EAAiD;AAC/C,MAAQC,KAAR,GAA6DF,aAA7D,CAAQE,KAAR;AAAA,MAAeC,MAAf,GAA6DH,aAA7D,CAAeG,MAAf;AAAA,MAAmCC,KAAnC,GAA6DJ,aAA7D,CAAuBK,UAAvB;AAAA,MAA0CC,KAA1C,GAA6DN,aAA7D,CAA0CM,KAA1C;AAAA,MAAiDC,OAAjD,GAA6DP,aAA7D,CAAiDO,OAAjD;;AAEA,8BAAyBP,aAAa,CAACQ,iBAAd,EAAzB;AAAA,MAAWC,EAAX,yBAAQC,CAAR;AAAA,MAAkBC,EAAlB,yBAAeC,CAAf;;AAEA,MAAIC,MAAJ,EAAYC,MAAZ;;AACA,MAAId,aAAa,CAACe,MAAlB,EAA0B;AACxB,gCAAmCf,aAAa,CAACe,MAAjD;AAAA,QAAWC,OAAX,yBAAQN,CAAR;AAAA,QAAuBO,OAAvB,yBAAoBL,CAApB;AACAC,IAAAA,MAAM,GAAGX,KAAK,GAAGc,OAAjB;AACAF,IAAAA,MAAM,GAAGX,MAAM,GAAGc,OAAlB;AACD,GAJD,MAIO;AACLJ,IAAAA,MAAM,GAAGb,aAAa,CAACkB,KAAd,CAAoBR,CAA7B;AACAI,IAAAA,MAAM,GAAGd,aAAa,CAACkB,KAAd,CAAoBN,CAA7B;AACD;;AAED,MAAMO,aAAa,GAAGtB,GAAG,CAACuB,KAAJ,CAAUZ,iBAAV,EAAtB;AACA,MAAME,CAAC,GAAGD,EAAE,GAAGU,aAAa,CAACT,CAAnB,GAAuBG,MAAjC;AACA,MAAMD,CAAC,GAAGD,EAAE,GAAGQ,aAAa,CAACP,CAAnB,GAAuBE,MAAjC;AAEAf,EAAAA,GAAG,CAACsB,KAAJ,CAAUC,QAAV,GAAqB,UAArB;AACAvB,EAAAA,GAAG,CAACsB,KAAJ,CAAUE,OAAV,GAAoBhB,OAAO,GAAG,EAAH,GAAQ,MAAnC;AACAR,EAAAA,GAAG,CAACsB,KAAJ,CAAUnB,KAAV,aAAqBA,KAArB;AACAH,EAAAA,GAAG,CAACsB,KAAJ,CAAUlB,MAAV,aAAsBA,MAAtB;AACAJ,EAAAA,GAAG,CAACsB,KAAJ,CAAUG,IAAV,aAAoBd,CAApB;AACAX,EAAAA,GAAG,CAACsB,KAAJ,CAAUI,GAAV,aAAmBb,CAAnB;AACAb,EAAAA,GAAG,CAACsB,KAAJ,CAAUK,MAAV,GAAmBzB,KAAnB;AACAF,EAAAA,GAAG,CAACsB,KAAJ,CAAUM,OAAV,GAAoBvB,KAApB;AACAL,EAAAA,GAAG,CAACsB,KAAJ,CAAUO,eAAV,aAA+Bf,MAA/B,gBAA2CC,MAA3C;AACAf,EAAAA,GAAG,CAACsB,KAAJ,CAAUQ,SAAV,oBAAgCvB,KAAhC;AACD;;AAED,eAAeR,YAAf","sourcesContent":["import app from '../app'\n\n/**\n * Transform DOMElement's position and size according given DisplayObject.\n *\n * @param {DOMElement} dom the DOM to be transformed.\n * @param {DisplayObject} displayObject the display object which provides position and size.\n */\nfunction transformDOM(dom, displayObject, layer) {\n  const { width, height, worldAlpha: alpha, angle, visible } = displayObject\n\n  const { x: $x, y: $y } = displayObject.getGlobalPosition()\n\n  let pivotX, pivotY\n  if (displayObject.anchor) {\n    const { x: anchorX, y: anchorY } = displayObject.anchor\n    pivotX = width * anchorX\n    pivotY = height * anchorY\n  } else {\n    pivotX = displayObject.pivot.x\n    pivotY = displayObject.pivot.y\n  }\n\n  const stagePosition = app.stage.getGlobalPosition()\n  const x = $x - stagePosition.x - pivotX\n  const y = $y - stagePosition.y - pivotY\n\n  dom.style.position = 'absolute'\n  dom.style.display = visible ? '' : 'none'\n  dom.style.width = `${width}px`\n  dom.style.height = `${height}px`\n  dom.style.left = `${x}px`\n  dom.style.top = `${y}px`\n  dom.style.zIndex = layer\n  dom.style.opacity = alpha\n  dom.style.transformOrigin = `${pivotX}px ${pivotY}px`\n  dom.style.transform = `rotate(${angle}deg)`\n}\n\nexport default transformDOM\n"],"file":"transformDOM.js"}